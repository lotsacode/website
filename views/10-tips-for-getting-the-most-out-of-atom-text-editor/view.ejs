<h1>10 tips for getting the most out of Atom text editor</h1>
<p>
	<a href="https://atom.io/">Atom</a> is a relatively new text editor released in 2015.
	It's open source, actively developed and well designed but known to have some memory problems.
	I switched over to Atom as I got tired of Sublime's buggy find-and-replace and was too lazy to learn Vim.
	Like with all text editors, to maximize your productivity you gotta get familiar with the core features,
	so here's some tips for you!
</p>

<h2>1. Moving and manipulating text</h2>
<p>To delete a word starting from the cursor, try <code class="code-inline">Alt+Backspace</code>. I used to spam backspace for all deletions, this is pretty convenient!
<p><video src="/static/images/atom/del2.webm" autoplay="true" loop="true" muted="true"></video></p>
<p><code class="code-inline">Ctrl+Backspace</code> does almost the same thing except it deletes spaces aswell.</p>
<p>Same principle applies for moving the cursor, <code class="code-inline">Alt+Left/Right</code> and <code class="code-inline">Ctrl+Left/Right</code>.
<p>To move a swap a line with the one below it or above, try <code class="code-inline">Ctrl+Up/Down</code>.
<p><video src="/static/images/atom/swap.webm" autoplay="true" loop="true" muted="true"></video></p>

<h2>2. Multi-selection</h2>
<p>Since I learned about multi-selecting in Sublime I could never live without it.
	Atom supports it too, all you gotta do is <code class="code-inline">Ctrl+click</code> and you spawn a new cursor.</p>
	<p><video src="/static/images/atom/multi.webm" autoplay="true" loop="true" muted="true"></video></p>
	<p>You can multi-select with arrow keys too. The default is <code class="code-inline">Ctrl+Alt+Up/Down</code>.
		However, in Windows the command is reserved to flip your screen.
		Changing it to <code class="code-inline">Ctrl+Shift+Up/Down</code> works for me.
	</p>

<h2>3. Changing keybinds</h2>
<p>
	Changing keybinds should be more or less trivial but Atom made it extra confusing.
	You can search for keybinds at <code class="code-inline">File -> Settings -> Keybinds</code>.
	When you find a command you'd like to rebind, copy the command and go to <code class="code-inline">File -> Keymap</code>.
	Now you need to add a new entry with the following syntax
</p>
<pre><code class="language-none">'selector':
	'key1': 'command1'
	'key2': 'command2'
	'key3': 'command3'
</code></pre>

<p>And that's it, it should work after saving the file.
The selectors are CSS-selectors. You can inspect the selector of any component in dev mode
<code class="code-inline">View -> Developer -> Toggle developer mode</code>. Use <code class="code-inline">atom-text-editor</code> if in doubt.
Here's the previously mentioned bind for multi-selection with arrow keys</p>
<pre><code class="language-none">'atom-text-editor':
  'ctrl-shift-up': 'editor:add-selection-above'
  'ctrl-shift-down': 'editor:add-selection-below'
</pre></code>
<p>
	Note that something like this will throw an error
</p>
<pre><code class="language-none">'atom-text-editor':
  	'key1': 'command1'
'atom-text-editor':
	'key2': 'command2'
</pre></code>
Instead you should include a selector only once.

<h2>4. Moving around</h2>
	<p>When your stack trace shows a line number for an error, you can navigate to it by pressing <code class="code-inline">Ctrl+G</code>
	and entering the line number.</p>
	<p>You can navigate the tabs just like in the browser with <code class="code-inline">Ctrl+Tab</code> or <code class="code-inline">CTRL+Shift+Tab</code>.
	To view a specific tab, you can do <code class="code-inline">Alt+1</code>, <code class="code-inline">Alt+2</code>, etc.</p>

<h2>5. Find and replace</h2>
<p>
	To open Atom's find-and-replace tool, press <code class="code-inline">Ctrl+F</code>. You can close it with <code class="code-inline">Esc</code>.
	Switch between the buffers with <code class="code-inline">Tab</code>.
	When you find something and press <code class="code-inline">Alt+Enter</code>, Atoms multi-selects all the occurences. That's pretty cool!
	<p><video src="/static/images/atom/find.webm" autoplay="true" loop="true" muted="true"></video></p>
	To confirm the replace buffer, press <code class="code-inline">Ctrl+Enter</code>.
</p>
<p>
	At the right side you have options for matching regexp, case, selection and words.
	The regexp option uses Javascript's regex syntax and it's too broad to cover here.
	Read about regexp <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">here</a>.
	Here's an example of the magical powers you gain after learning regexp.
	<p><video src="/static/images/atom/magic.webm" autoplay="true" loop="true" muted="true"></video></p>
	Short explanation: <code class="code-inline">\S</code> matches a single character other than whitespace and <code class="code-inline">+</code> matches a pattern 1 or more times.
</p>

<h2>6. Rows and columns</h2>
<p>Atom can split the text editor to rows and columns.
 To spawn a new row column, try <code class="code-inline">Ctrl+K</code> and press <code class="code-inline">Left/Right/Up/Down</code>.
 To close a selected row or column, do <code class="code-inline">Ctrl+W</code>.
</p>

<h2>7. Snippets</h2>
<p>
	Atom comes with snippets that allow you to enter a prefix in the editor and hit tab or enter to expand it.
	<p><video src="/static/images/atom/snippets.webm" autoplay="true" loop="true" muted="true"></video></p>
	The available snippets are sensitive to the current language being used, you can switch it in the bottom right corner.
	You can add your own snippets too, in <code class="code-inline">File -> Snippets</code>.
	Here's an example snippet that spits out a HTML template
	<pre><code class="language-none">'.text':
	'HTML template':
	    'prefix': 'html-template'
	    'body': '&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;title&lt;/title&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheet.css&quot; type=&quot;text/css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n$1\n&lt;/body&gt;\n&lt;/html&gt;\n'
</code></pre>
</p>
<h2>8. Disable spell checking</h2>
<p>
	That red stuff under your text gets pretty annoying after a while, especially if you're not writing english.
	It's enabled by default, to disable it go over to <code class="code-inline">Settings -> Packages</code>, search for spell-check and click Disable.
</p>
<p>
	<img src="/static/images/atom/red-stuff.png"/>
</p>

<h2>9. Community packages</h2>
<p>
There's a plethora of useful community packages around. You can look at them <a href="https://atom.io/packages">here</a> and install them from
the command line with
</p>
<code class="code-inline">apm install package-name</code>
<p>
	apm wasn't in my PATH for some reason, adding <code class="code-inline">C:\Users\username\AppData\Local\atom\bin</code> to PATH solved the issue for me.
</p>
<p>Here's a couple must-haves</p>
<ul>
	<li><a href="https://atom.io/packages/file-icons">file-icons</a> A big pile of extension icons for the file browser (and tabs).</li>
	<li><a href="https://atom.io/packages/minimap">minimap</a> A minimap of your source code, just like in Sublime.</li>
</ul>

<h2>10. Build example</h2>
<p>
	Custom builds are not included in Atom by default.
	Let's install <code class="code-inline">build</code>, a tool for building you projects inside Atom and use it to build a simple C project with gcc.
</p>
<p><code class="code-inline">apm install busy build</code></p>
<p>
	Create a new directory and open it with <code class="code-inline">File -> Open folder</code>.
	Add the following snippet to the root folder as <code class="code-inline">.atom-build.js</code>
</p>

<pre><code class="language-none">module.exports = {
  cmd: "gcc -Wall program.c -o program && program.exe",
  preBuild: function () {
    console.log('This is run **before** the build command');
  },
  postBuild: function () {
    console.log('This is run **after** the build command');
  },
  functionMatch: function (terminal_output) {return [];}
};
</code></pre>
<p>
	<code class="code-inline">preBuild</code>, <code class="code-inline">postBuild</code> and <code class="code-inline">functionMatch</code> don't really do anything here, it compiles without them
	but I included them to get rid of an error icon. Read more about the build file
	<a href="https://atom.io/packages/build">here</a>.</p>
</p>
Here's the C program, <code class="code-inline">program.c</code>
<pre><code class="language-none">#include &lt;stdio.h&gt;
int main() {
  printf("Hello world!");
}
</code></pre>
	And here's what happens after pressing <code class="code-inline">Ctrl+Alt+B</code> in Atom
</p>
<p>
	<img src="/static/images/atom/build.jpg"/>
</p>
<p>That's all folks!</p>
