<h1>Creating a real-time game server with NodeJS and Socket.io</h1>
<p>In this tutorial I'll show you a simple SocketIO app and then a multiplayer "game" made with ThreeJS that looks like this</p>
<iframe width="100%" height="400" src="https://www.youtube.com/embed/t7PgcueEKF4"></iframe>
<p>	
	SocketIO enables you to listen and stream data over the internet. It's perfect for network beginners, as it abstracts away all the nasty protocol stuff. <code>socket.on(...)</code> listens for data from clients and <code>socket.emit(...)</code> sends data to a connected client. You can pass arrays or objects and SocketIO will do all the dirty work for ya. 
</p>

<h2>Simple example</h2>


<p>
	I'm assuming that you're familiar with <a href="https://expressjs.com/">express</a>. It is used to create a web server running on port 9000. The socketIO data is sent to port 4000.
</p>

<pre><code>var http = require('http');
var express = require('express');
var app = express();
var server = http.createServer(app);
var io = require('socket.io').listen(server);
server.listen(4000);

// GET request
app.get('/', function(req, res) {
	console.log("Request from " + req.ip)
	res.render("index.html");
});

// Files
app.use('/static', express.static(__dirname + '/static'));

// Start the server
app.listen(9000, function() {
	console.log('Listening on port 9000.');
});

// Socket.io
io.on('connection', function (socket) {

    // Listen for hello message from client
    socket.on('hello', function (data) {
        console.log(data);
        var response = {
            "message": "Hello from server!"
        };
        // Send response to client
        socket.emit('response', response);
    });

});
</code></pre>
Here's the HTML client
<pre><code>&lt!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;title&gt;Socket.io&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src="static/js/socket.io.js"&gt;&lt;/script&gt;
        &lt;script&gt;
            var socket = io('http://localhost:4000');

            // Send message to server
            socket.emit('hello', { "message": "Hello!"} );

            // Listen for response from server
            socket.on('response', function (data) {
                document.body.innerHTML = data.message;
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>What's going on here?</h3>
<p>
	The client script sends a 'hello' message to <code>http://localhost:4000</code>. In a real-world situation this would be <code>http://myawesomewebsite.com:4000</code>. The message is sent over WebSockets - a protocol that enable the browser to send streams of messages on top of TCP. The server picks up the message and sends a response back to the client.
</p>

<h3>Wait, why websockets?</h3>
<p>
	Why not just communicate with good old HTTP requests? The thing is that a single HTTP request contains a big chuck of unrelated data.
	WebSockets is better for situations that involve low-latency communications, which is exactly what we're aiming for in an online game.
</p>

<h3>Alternatives to socket.emit</h3>
<p>
	In the last example we used <code>socket.emit(...)</code> to send a message. If you want to send a message to ALL clients, including the sender itself, you can use <code>io.sockets.emit('hello', data)</code>. To send a message to all clients except the sender, you can use <code>socket.broadcast.emit('hello', data)</code>.
</p>

<h2>The game server</h2>

<p>
	Now that we understand how Socket.io works, it's time to make a 3D scene where the clients can see eachother and move. 
	Let's start with the web server code
</p>
<pre><code>var http = require('http');
var express = require('express');
var app = express();
var server = http.createServer(app);
var io = require('socket.io').listen(server);
app.set('view engine', 'ejs');
server.listen(4000);

// Index page
app.get('/', function(req, res) {
	console.log("Request from " + req.ip)
	res.render("index.ejs");
});

// Files
app.use('/static', express.static(__dirname + '/static'));

// Start the server
app.listen(9000, function() {
	console.log('Listening on port 9000.');
});
</code></pre>

<p>
	In a multiplayer scenario you typically have some kind of data structure that models the game world.  This data structure should have authority over data that affects the outcome of the game. Let's add a World-object to the server which contains player data.
</p>

<pre><code>// Game world
var World = {
    players: {},
    add: function(player) {
        World.players[player.id] = player;
    }
}

</code></pre>

<p>
	Note that the players are stored inside an object instead of an array. I found objects more convenient but it's a matter of taste. 
	You can iterate over the object in the client side and access them with id's.
	Now let's add the socketIO stuff.
</p>
<pre><code>// Logging helper
function log(message) {
    var date = new Date();
    console.log(date.toLocaleTimeString() + " [" + message + "]");
}

// Socket.io
io.on('connection', function (socket) {

    // Listen for init call from client
    socket.on('init', function(data) {
        var newPlayer = {
            id: socket.id, 
            color: Math.floor(Math.random()*0xffffff), 
            connected: 1, 
            x: 0, y: 5, z: 0
        }
        World.add(newPlayer);
        log("init " + socket.id);
        socket.emit('init', newPlayer);
    });

    // Listen for position from client
    socket.on('update', function(data) {
        // log("update " + data.player.id);
        World.players[data.player.id] = data.player;
        // Send player position to client 
        socket.emit('update', {players: World.players});
    });

    // Listen for client disconnect
    socket.on('disconnect', function() {
        if (World.players[socket.id] != null) {
            log("disconnect " + socket.id)
            World.players[socket.id].connected = 0;
        } 
    });

});
</code></pre>
<p>The client calls <code>'init'</code> after loading the page. This causes the server to create a new player and send back player data. After that the client adds the new player to scene and starts drawing the game. The socket id is used to differentiate between other players. </p>
<p>
	The client calls <code>'update'</code> at each draw frame, usually around 60 times a second. The server sends back the player positions.
</p>
<p>
	Finally, the <code>'disconnect'</code> call is done when a client closes the web page. The server updates the connection status of the player. Other clients remove the player from the scene after noticing that the connection status is zero.
</p>

<h2>The client</h2>

<p>
	I tried to keep it simple but the client is around 200 lines. 
	I'm gonna just copy paste the thing here without much explanation.
</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;title&gt;Socket.io&lt;/title&gt;
        &lt;style&gt;
        	body, html { 
        		width: 100%; height: 100%; padding: 0px; margin: 0px; 
        	}
        	#debug {
        		background: black;
        		color: white;
        		position: absolute;
        		width: calc(100%-20px);
        		font-size: 12px;
        		font-family: sans-serif;
        		top: 0;
        		left: 0;
        		padding: 20px;
        		line-height: 0px;
        		opacity: 0.5;
        	}
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src="/static/js/socket.io.js"&gt;&lt;/script&gt;
        &lt;script src="/static/js/three.min.js"&gt;&lt;/script&gt;
        &lt;script src="/static/js/jquery-2.1.1.min.js"&gt;&lt;/script&gt;
        &lt;div id="webgl" style="width: 100%; height: 100%;"&gt;&lt;/div&gt;
        &lt;div id="debug"&gt;&lt;/div&gt;
        &lt;script&gt;
        	Script goes here...
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>
	That's the base HTML. Don't forget to include <a href="https://cdnjs.com/libraries/socket.io">socket.io.js.</a>, 
	<a href="/static/js/jquery-2.1.1.min.js">jquery</a> and 
	<a href="/static/js/three.min.js">threejs</a> in your static folder. 
	Next is the game itself
</p>
<!--
<p>Let's go through the networking stuff</p>

<pre><code>// Network initialization
var players = {};	
var clientId = null;	// socket/client id
socket.emit('init');

// Listen for init data
socket.on('init', function(data) {
	clientId = data.id;
	var mat = material.clone();
	mat.color.setHex(data.color); 
	var mesh = new THREE.Mesh(
		playerGeometry, 
		mat
	);
	mesh.position.x = data.x;
	mesh.position.y = data.y;
	mesh.position.z = data.z;
    players[clientId] = { id: data.id, mesh: mesh };
	scene.add(mesh);
});
</code></pre>





<pre><code>// Update player data to server
socket.emit('update', { 
	player: {
		id: clientId, 
		color: players[clientId].mesh.material.color.getHex(),
		connected: 1,
		x: players[clientId].mesh.position.x, 
		y: players[clientId].mesh.position.y,
		z: players[clientId].mesh.position.z
	}
});
</code></pre>




<pre><code>// Listen for player updates
socket.on('update', function(data) {
	$("#debug").html("");
	var keys = Object.keys(data.players);
	var ps = keys.map(function(key) {
		return data.players[key]
	});
	keys.forEach(function(key) {
		var player = data.players[key];
		$("#debug").append("<p>id=" + player.id + ", x=" + 
			player.x.toFixed(2) + ", y=" + 
			player.y.toFixed(2) + ", z=" + 
			player.z.toFixed(2) + ", conn=" +
			player.connected +  ", color=" +
			'0x' + player.color.toString(16) + "</p>"
		);
		if (!(player.id in players)) {
			var mat = material.clone();
			mat.color.setHex(player.color);
			var mesh = new THREE.Mesh(playerGeometry, mat);
		    players[player.id] = { id: player.id, mesh: mesh };
	    	scene.add(mesh);
		}
		if (!player.connected) {
			if (players[player.id].mesh != null) {
				scene.remove(players[player.id].mesh);
				players[player.id].mesh = null;
			}
			return;
		}
		if (player.id == clientId) return;
		players[player.id].mesh.position.x = player.x;
		players[player.id].mesh.position.y = player.y;
		players[player.id].mesh.position.z = player.z;
	});
});
</code></pre>
-->

<pre><code>// Network variables
var players = {};	
var clientId = null;	// socket/client id

// Set up the scene
var t = 0;			
var dt = 0.001;
var moving = false;		
var angle = -Math.PI/2; // direction of movement
var socket = io('http://localhost:4000');
var scene = new THREE.Scene();
var width = $("#webgl").width();
var height = $("#webgl").height();
var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
camera.position.z = 30;
camera.position.y = 10;
var renderer = new THREE.WebGLRenderer();
renderer.setClearColor( 0x202020, 1 );
renderer.setSize( width, height );
document.getElementById("webgl").appendChild( renderer.domElement );
var playerGeometry = new THREE.SphereGeometry(2.0, 64, 64);
var material = new THREE.MeshBasicMaterial({
    color: Math.random() * 0xffffff 
});	
var fg = new THREE.PlaneGeometry(1280, 1280, 64, 64); 
var fm = new THREE.MeshBasicMaterial({
    color: 0x2F0fff,
    wireframe: true
});
var floor = new THREE.Mesh(fg, fm);
scene.add(floor);
floor.rotation.x = -Math.PI/2;
floor.position.y -= 0.5;
// Starfield just for the heck of it	
var starField = new THREE.Geometry();
for (var i = 0; i < 1000; i++) {
	starField.vertices.push(new THREE.Vector3(
		(Math.random()-Math.random())*400, 
		Math.random()*100, 
		(Math.random()-Math.random())*400));
}
scene.add(new THREE.Points(starField, new THREE.PointsMaterial( { color: 0xffff88, size: 0.4 } )))

// Render the scene 
function render() {
    requestAnimationFrame( render );
    renderer.render( scene, camera );     
    if (clientId == null) return;
    t += dt;
    // Player movement
    if (moving) {
    	var x = ( mouseX / window.innerWidth ) * 2 - 1;
		var y = - ( mouseY / window.innerHeight ) * 2 + 1;
		angle += x * 0.1;
		players[clientId].mesh.position.x += Math.cos(angle);
        camera.position.x = players[clientId].mesh.position.x - 30*Math.cos(angle);
        players[clientId].mesh.position.z += Math.sin(angle);
        camera.position.z = players[clientId].mesh.position.z - 30*Math.sin(angle);
        camera.rotation.y = Math.PI + Math.atan2(Math.cos(angle), Math.sin(angle));
        players[clientId].mesh.rotation.y = camera.rotation.y;
    }
	// Update the player's position to server
    socket.emit('update', { 
    	player: {
    		id: clientId, 
    		color: players[clientId].mesh.material.color.getHex(),
    		connected: 1,
    		x: players[clientId].mesh.position.x, 
    		y: players[clientId].mesh.position.y,
    		z: players[clientId].mesh.position.z
    	}
    });

}

// Mouse events
$("body").mouseup(function(e) {
	moving = false;	
});
$("body").mousedown(function(e) {
	moving = true;
});
$("body").mousemove(function(e) {
	mouseX = e.clientX;
	mouseY = e.clientY;
});

// Network initialization
socket.emit('init');

// Listen for init data
socket.on('init', function(data) {
	clientId = data.id;
	var mat = material.clone();
	mat.color.setHex(data.color); 
	var mesh = new THREE.Mesh(
		playerGeometry, 
		mat
	);
	mesh.position.x = data.x;
	mesh.position.y = data.y;
	mesh.position.z = data.z;
    players[clientId] = { id: data.id, mesh: mesh };
	scene.add(mesh);
});

// Listen for player updates
socket.on('update', function(data) {
	$("#debug").html("");
	var keys = Object.keys(data.players);
	var ps = keys.map(function(key) {
		return data.players[key]
	});
	keys.forEach(function(key) {
		var player = data.players[key];
		$("#debug").append("&lt;p&gt;id=" + player.id + ", x=" + 
			player.x.toFixed(2) + ", y=" + 
			player.y.toFixed(2) + ", z=" + 
			player.z.toFixed(2) + ", conn=" +
			player.connected +  ", color=" +
			'0x' + player.color.toString(16) + "&lt;/p&gt;"
		);
		if (!(player.id in players)) { // add new player to scene
			var mat = material.clone();
			mat.color.setHex(player.color);
			var mesh = new THREE.Mesh(playerGeometry, mat);
		    players[player.id] = { id: player.id, mesh: mesh };
	    	scene.add(mesh);
		}
		if (!player.connected) { // remove player from scene
			if (players[player.id].mesh != null) {
				scene.remove(players[player.id].mesh);
				players[player.id].mesh = null;
			}
			return;
		}
		if (player.id == clientId) return;
		players[player.id].mesh.position.x = player.x;
		players[player.id].mesh.position.y = player.y;
		players[player.id].mesh.position.z = player.z;
	});
});

// Let's go
render();
</code></pre>


<p>That's all folks! The code is in github, you can copy it from <a href="https://github.com/lotsacode/socket-io-game-server-example">here</a>.</p>