<h1>Creating a real-time game server with NodeJS and Socket.io</h1>
<p>
	SocketIO enables you to listen and stream data over the internet. It's
	perfect for network beginners as it abstracts all the nasty protocol
	stuff. You can send arrays or JSON objects and SocketIO will do all the dirty work for you.
</p>
<p>In this article I'll explain a bit about Socket.io
	and give you a simple example to get started.
	After that I will show you a
	multiplayer "game" that looks like this</p>
	<iframe width="100%" height="400" src="https://www.youtube.com/embed/t7PgcueEKF4"></iframe>

<h2>Why use Socket.io?</h2>
<p>
	Why not just communicate with good old AJAX? The thing is that a
	single AJAX request contains a big chunk of unrelated data.
	SocketIO is better for situations that involve low-latency communications,
	such as online games.
	SocketIO was actually designed by Google with the help of Microsoft and
	many other leading companies to replace AJAX.
	All browsers support it. <b>There are no cons</b>.
</p>
<h2>How does it work under the hood?</h2>
<p>
	Socket.io is an abstraction of TCP, more specifically WebSockets - a protocol
	that enables the browser to send streams of messages with TCP.
	TCP itself is an internet protocol that is used by major network applications such
	as HTTP and SMTP (emails). Another protocol worth mentioning is UDP, which is slightly better than TCP
	for situations where low latency is more important than preventing packet loss (online games).
	Unfortunately WebSockets does not support UDP...
</p>

<h2>Simple example</h2>

<p>
	Here's a simple web server + SocketIO setup with <a href="https://expressjs.com/">Express</a>.
	Install the dependencies with
</p>
<pre><code class="language-none">npm install express socket.io</code></pre>
<pre><code class="language-none">var http = require('http');
var express = require('express');
var app = express();
var server = http.createServer(app);
var io = require('socket.io').listen(server);
server.listen(4000);

// GET request
app.get('/', function(req, res) {
	console.log("Request from " + req.ip)
	res.render("index.html");
});

// Files
app.use('/static', express.static(__dirname + '/static'));

// Start the server
app.listen(9000, function() {
	console.log('Listening on port 9000.');
});

// Socket.io
io.on('connection', function (socket) {

    // Listen to hello message from client
    socket.on('hello', function (data) {
        console.log(data);
        var response = {
            "message": "Hello from server!"
        };
        // Send response to client
        socket.emit('response', response);
    });

});
</code></pre>
Here's the HTML client
<pre><code class="language-none">&lt!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;title&gt;Socket.io&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src="static/js/socket.io.js"&gt;&lt;/script&gt;
        &lt;script&gt;
            var socket = io('http://localhost:4000');

            // Send message to server
            socket.emit('hello', { "message": "Hello!"} );

            // Listen to response from server
            socket.on('response', function (data) {
                document.body.innerHTML = data.message;
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>
	How it works should be pretty self-explanatory.
	The client forms a connection with <code class="code-inline">http://localhost:4000</code>,
	then emits a <code class="code-inline">'hello'</code> message to the server and receives a response.
	In a production environment the URL would be <code class="code-inline">https://myawesomewebsite.com:4000</code>.
</p>

<p>
	In addition to <code class="code-inline">socket.emit(...)</code> and <code class="code-inline">socket.on(...)</code> SocketIO
	comes with plenty of features like rooms, namespaces and broadcasts.
	Read the official docs <a href="https://socket.io/docs/">here</a>.
</p>

<h2>The game server</h2>

<p>
	Now that we understand the basics of SocketIO, let's make a 3D scene where clients can see eachother and move.
	Let's start with the web server code
</p>
<pre><code class="language-none">var http = require('http');
var express = require('express');
var app = express();
var server = http.createServer(app);
var io = require('socket.io').listen(server);
app.set('view engine', 'ejs');
server.listen(4000);

// Index page
app.get('/', function(req, res) {
	console.log("Request from " + req.ip)
	res.render("index.ejs");
});

// Files
app.use('/static', express.static(__dirname + '/static'));

// Start the server
app.listen(9000, function() {
	console.log('Listening on port 9000.');
});
</code></pre>

<p>
	In a multiplayer scenario you typically have some kind of data structure that
	models the game world. The data structure should have authority over data
	that affects the outcome of the game. Let's add a World-object to the server
	which essentially contains player positions.
</p>

<pre><code class="language-none">// Game world
var World = {
    players: {},
    add: function(player) {
        World.players[player.id] = player;
    }
}
</code></pre>

<p>Here's the SocketIO code</code>
<pre><code class="language-none">// Logging helper
function log(message) {
    var date = new Date();
    console.log(date.toLocaleTimeString() + " [" + message + "]");
}

// Socket.io
io.on('connection', function (socket) {

    // Listen for init call from client
    socket.on('init', function(data) {
        var newPlayer = {
            id: socket.id,
            color: Math.floor(Math.random()*0xffffff),
            connected: 1,
            x: 0, y: 5, z: 0
        }
        World.add(newPlayer);
        log("init " + socket.id);
        socket.emit('init', newPlayer);
    });

    // Listen for position from client
    socket.on('update', function(data) {
        // log("update " + data.player.id);
        World.players[data.player.id] = data.player;
        // Send player position to client
        socket.emit('update', {players: World.players});
    });

    // Listen for client disconnect
    socket.on('disconnect', function() {
        if (World.players[socket.id] != null) {
            log("disconnect " + socket.id)
            World.players[socket.id].connected = 0;
        }
    });

});
</code></pre>
<p>Short explanation.</p>
<p>
	<code class="code-inline">'init'</code> is received right after a client loads the page.
	The server adds a new player and sends back player data.
</p>
<p>
	<code class="code-inline">'update'</code> is received at a regular interval from each client.
	The message contains player data and the server responds with player positions.
	Note that you generally don't want to send the updates to the server at each frame as it's
	relatively expensive, doing so will cause a large drop in FPS. You should instead make a separate interval
	with <code class="code-inline">setInterval</code>. Alternatively you could try a fancy multithreading setup with WebWorkers.
</p>
<p>
	Finally, the <code class="code-inline">'disconnect'</code>-message is received after a client closes the web page.
	This event is actually built in to SocketIO and does not need any client-side implementation.
	Think about it... How does a disconnected client emit a message? :)
	I noticed that this implementation is <b>not completely foolproof</b>.
	To be completely sure that a client disconnected you should send a "ping" message to the client
	at a regular interval - if there is no response you can assume that the client has disconnected.
</p>

<h2>The client</h2>

<p>
	I tried to keep it simple but the client is around 200 lines.
	I'm gonna just copy paste the thing here without much explanation.
	It's a simple ThreeJS scene that draws a bunch of moving spheres.

</p>

<pre><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;title&gt;Socket.io&lt;/title&gt;
        &lt;style&gt;
        	body, html {
        		width: 100%; height: 100%; padding: 0px; margin: 0px;
        	}
        	#debug {
        		background: black;
        		color: white;
        		position: absolute;
        		width: calc(100%-20px);
        		font-size: 12px;
        		font-family: sans-serif;
        		top: 0;
        		left: 0;
        		padding: 20px;
        		line-height: 0px;
        		opacity: 0.5;
        	}
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src="/static/js/socket.io.js"&gt;&lt;/script&gt;
        &lt;script src="/static/js/three.min.js"&gt;&lt;/script&gt;
        &lt;script src="/static/js/jquery-2.1.1.min.js"&gt;&lt;/script&gt;
        &lt;div id="webgl" style="width: 100%; height: 100%;"&gt;&lt;/div&gt;
        &lt;div id="debug"&gt;&lt;/div&gt;
        &lt;script&gt;
        	Script goes here...
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>
	That's the base HTML. Don't forget to include <a href="https://cdnjs.com/libraries/socket.io">socket.io.js.</a>,
	<a href="/static/js/jquery-2.1.1.min.js">jquery</a> and
	<a href="/static/js/three.min.js">threejs</a> in your static folder.
	Next is the game itself
</p>

<pre><code class="language-none">// Network variables
var players = {};
var clientId = null;	// socket/client id

// Set up the scene
var t = 0;
var dt = 0.001;
var moving = false;
var angle = -Math.PI/2; // direction of movement
var socket = io('http://localhost:4000');
var scene = new THREE.Scene();
var width = $("#webgl").width();
var height = $("#webgl").height();
var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
camera.position.z = 30;
camera.position.y = 10;
var renderer = new THREE.WebGLRenderer();
renderer.setClearColor( 0x202020, 1 );
renderer.setSize( width, height );
document.getElementById("webgl").appendChild( renderer.domElement );
var playerGeometry = new THREE.SphereGeometry(2.0, 64, 64);
var material = new THREE.MeshBasicMaterial({
    color: Math.random() * 0xffffff
});
var fg = new THREE.PlaneGeometry(1280, 1280, 64, 64);
var fm = new THREE.MeshBasicMaterial({
    color: 0x2F0fff,
    wireframe: true
});
var floor = new THREE.Mesh(fg, fm);
scene.add(floor);
floor.rotation.x = -Math.PI/2;
floor.position.y -= 0.5;
// Starfield just for the heck of it
var starField = new THREE.Geometry();
for (var i = 0; i < 1000; i++) {
	starField.vertices.push(new THREE.Vector3(
		(Math.random()-Math.random())*400,
		Math.random()*100,
		(Math.random()-Math.random())*400));
}
scene.add(new THREE.Points(starField, new THREE.PointsMaterial( { color: 0xffff88, size: 0.4 } )))

// Render the scene
function render() {
    requestAnimationFrame( render );
    renderer.render( scene, camera );
    if (clientId == null) return;
    t += dt;
    // Player movement
    if (moving) {
    	var x = ( mouseX / window.innerWidth ) * 2 - 1;
		var y = - ( mouseY / window.innerHeight ) * 2 + 1;
		angle += x * 0.1;
		players[clientId].mesh.position.x += Math.cos(angle);
        camera.position.x = players[clientId].mesh.position.x - 30*Math.cos(angle);
        players[clientId].mesh.position.z += Math.sin(angle);
        camera.position.z = players[clientId].mesh.position.z - 30*Math.sin(angle);
        camera.rotation.y = Math.PI + Math.atan2(Math.cos(angle), Math.sin(angle));
        players[clientId].mesh.rotation.y = camera.rotation.y;
    }
	// Update the player's position to server
    socket.emit('update', {
    	player: {
    		id: clientId,
    		color: players[clientId].mesh.material.color.getHex(),
    		connected: 1,
    		x: players[clientId].mesh.position.x,
    		y: players[clientId].mesh.position.y,
    		z: players[clientId].mesh.position.z
    	}
    });

}

// Mouse events
$("body").mouseup(function(e) {
	moving = false;
});
$("body").mousedown(function(e) {
	moving = true;
});
$("body").mousemove(function(e) {
	mouseX = e.clientX;
	mouseY = e.clientY;
});

// Network initialization
socket.emit('init');

// Listen for init data
socket.on('init', function(data) {
	clientId = data.id;
	var mat = material.clone();
	mat.color.setHex(data.color);
	var mesh = new THREE.Mesh(
		playerGeometry,
		mat
	);
	mesh.position.x = data.x;
	mesh.position.y = data.y;
	mesh.position.z = data.z;
    players[clientId] = { id: data.id, mesh: mesh };
	scene.add(mesh);
});

// Listen for player updates
socket.on('update', function(data) {
	$("#debug").html("");
	var keys = Object.keys(data.players);
	var ps = keys.map(function(key) {
		return data.players[key]
	});
	keys.forEach(function(key) {
		var player = data.players[key];
		$("#debug").append("&lt;p&gt;id=" + player.id + ", x=" +
			player.x.toFixed(2) + ", y=" +
			player.y.toFixed(2) + ", z=" +
			player.z.toFixed(2) + ", conn=" +
			player.connected +  ", color=" +
			'0x' + player.color.toString(16) + "&lt;/p&gt;"
		);
		if (!(player.id in players)) { // add new player to scene
			var mat = material.clone();
			mat.color.setHex(player.color);
			var mesh = new THREE.Mesh(playerGeometry, mat);
		    players[player.id] = { id: player.id, mesh: mesh };
	    	scene.add(mesh);
		}
		if (!player.connected) { // remove player from scene
			if (players[player.id].mesh != null) {
				scene.remove(players[player.id].mesh);
				players[player.id].mesh = null;
			}
			return;
		}
		if (player.id == clientId) return;
		players[player.id].mesh.position.x = player.x;
		players[player.id].mesh.position.y = player.y;
		players[player.id].mesh.position.z = player.z;
	});
});

// Let's go
render();
</code></pre>

<p>
	That's all folks! The code is in github,
	you can copy it from <a href="https://github.com/lotsacode/socket-io-game-server-example">here</a>.
</p>
