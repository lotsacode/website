<h1>How to implement drag'n'drop file uploading with NodeJS/Express</h1>

<p>
	In this tutorial we'll make a HTML widget where you can drag files to
	(or click to open the usual file browser). After that we'll look at how to
	send the file to a NodeJS/Express web server with jQuery. Here's the HTML setup
</p>

<pre><code class="language-js">&lt;input type="file" id="file" style="display: none;"&gt;&lt;/input&gt;
&lt;div id="dropzone"&gt;Drop files here or click to upload.&lt;/div&gt;
</pre></code>

<h2>Catching and sending the file</h2>

<p>Now let's catch the file with jQuery when the user chooses it or drags it to the div. </p>

<pre><code class="language-js">$("#dropzone").on("drop", function(e) {
    e.preventDefault();
    sendFile(e.originalEvent.dataTransfer.files[0])
});

$("#dropzone").on('dragover', function(e) {
	// dragover needs to be prevented for some reason
	e.preventDefault();
});

$("#dropzone").click(function(e) {
	$("#file").click();
});

$("#file").change(function() {
    sendFile(this.files[0]);
});
</code></pre>

<p>The file can be sent to the server by wrapping it in a
	FormData-object and using a XMLHttpRequest.</p>

<pre><code class="language-js">function sendFile(file) {
	var xhr = new XMLHttpRequest();
	xhr.open("POST", '/upload', true);
	var formData = new FormData();
	formData.append("file", file);
	xhr.send(formData);
}
</code></pre>

<h2>Server side</h2>

<p>
	To catch the file in the server, you can use <code class="code-inline">multiparty</code> to parse the
	incoming request. First you need to install it
</p>
<pre><code class="language-js">npm install multiparty</code></pre>
<p>And then add this code to your web server</p>
<pre><code class="language-js">var multiparty = require('multiparty');
app.post("/upload", function(req, res) {
	var form = new multiparty.Form({uploadDir: __dirname});
    form.parse(req, function(err, fields, files) {
    	console.log(files);
    });
});
</pre></code>

<p>With this setup the file should be automatically saved to the project's root directory.</p>
<h2>Bonus: Monitoring progress</h2>
<p>To monitor the progress of the uploading in the client, try this</p>

<pre><code class="language-js">xhr.onprogress = function(e) {
	if (e.lengthComputable) {
    	var percentComplete = (e.loaded / e.total)*100;
    	console.log(percentComplete);
    }
};
</pre></code>

<p>That's all! I hope it works out for you.</p>
