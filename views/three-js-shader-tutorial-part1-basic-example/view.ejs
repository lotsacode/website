<h1>Three.js shader tutorial part 1 - Basic example</h1>

<p>
    A shader is a small program that lives in the GPU. 
    They are written in a special graphics language called OpenGL Shading Language (GLSL), which highly resembles the C language.
    Shaders are applied to 3d objects a.k.a meshes. They can be used for post processing effects too but in this tutorial we'll focus on meshes.
    Shaders come in two types, vertex- and fragment shaders.
</p>
<p>
    A vertex shader runs first. It's primary job is to transform the vertices from 3D coordinates to screen coordinates. A vertex shader can be used to transform the vertices however you like. A fragment shader runs second. It's job is to define how the faces of a mesh are coloured.
</p>
<p>
    There are three types of special variables in shaders: <b>uniforms</b>, <b>attributes</b>, and <b>varyings</b>.
</p>
<p>
    <b>Uniforms</b> are variables that have the same value for all vertices, such as time. Uniforms can be defined inside Javascript and passed to the shader.
</p>
<p>
    <b>Attributes</b> are variables associated with each vertex, for instance, the vertex position, is an example of data that would be stored in an attribute. Attributes can only be accessed within the vertex shader.
</p>
<p>
    <b>Varyings</b> are variables that are defined in the vertex shader, and are automatically passed (and interpolated) to the fragment shader. Varyings can be used to pass down an attribute to a fragment shader, for example. 
</p>
<p>   
    But why use shaders? Well, doing computer graphics with the CPU is really slow.
    A shader gives you direct access to the parallel power of the GPU, letting you render insanely complex looking graphics with 60 fps.
    The catch is that you have to learn GLSL, shaders can be difficult to master and very annoying to debug.
</p>

<h2>Built-in uniforms and attributes in ThreeJS</h2>

<p>ThreeJS comes with a bunch of <a href="https://threejs.org/docs/api/renderers/webgl/WebGLProgram.html">default uniforms and attributes</a>. For a vertex shader, they are:</p>

<p><code>uniform mat4 modelMatrix;      // transforms a 3-vector from model space to world space</code></p>
<p><code>uniform mat4 viewMatrix;       // transforms a 3-vector from world space to camera space</code></p>
<p><code>uniform mat4 projectionMatrix; // transforms a 3-vector from camera space to screen space</code></p>
<p><code>uniform vec3 cameraPosition;   // camera position in world space</code><br>
<p><code>attribute vec3 position;       // vertex position in model space</code><br>
<p><code>attribute vec3 normal;         // vector pointing towards “outside of the surface”</code></p>

<p>The fragment shader comes with fewer variables. (Note, you can use varyings to pass down variables to the fragment shader).</p>

<p><code>uniform mat4 viewMatrix;</code></p>
<p><code>uniform vec3 cameraPosition;</code></p>


<h2>Example vertex shader</h2>

<script id="vertex" type="x-shader/x-vertex">
    varying vec3 pos;
    void main() {
        pos = position;
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    }
</script>

<pre><code>&lt;script id="vertex" type="x-shader/x-vertex"&gt;
    varying vec3 pos;
    void main() {
        pos = position;
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    }
&lt;/script&gt;
</code></pre>

<p>
    Let's break this down. Every vertex shader contains a main-function that sets the value of <code>gl_Position</code>. We declare a <code>varying vec3 pos</code> and make it store the vertex position. It will be used in the fragment shader for lightning calculations. The line <code>gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);</code> is the transformation from model space to screen space. If you're confused what it does, don't worry. Just make sure you include it in every vertex shader. You can transform the variable <code>position</code> for morph effects.
</p>


<h2>Example fragment shader</h2>

<script id="fragment" type="x-shader/x-fragment">
    varying vec3 pos;
    uniform float time;
    void main() {
        float light =  pow(length(pos), 4.0)/512.0;
        gl_FragColor = vec4(0.0, 0.5, 1.0, 1.0) * light;
    }
</script>

<pre><code>&lt;script id="fragment" type="x-shader/x-fragment"&gt;
    varying vec3 pos;
    uniform float time;
    void main() {
        float light =  pow(length(pos), 4.0)/512.0;
        gl_FragColor = vec4(0.0, 0.5, 1.0, 1.0) * light;
    }
&lt;/script&gt;
</code></pre>


<p>
    Every fragment shader contains a main-function that sets the value of gl_FragColor.
    The variable <code>pos</code> should now contain the vertex position.
    The variable <code>light</code> is for making the edges of our mesh little bit pronounced.
    Notice the line <code>uniform float time</code>. That thing holds the current time. 
</p>

<h2>Example scene</h2>

<pre><code>&lt;div id="webgl" style="width: 100%; height: 400px;"&gt;&lt;/div&gt;
&lt;script&gt;
    var scene = new THREE.Scene();
    var width = $("#webgl").width();
    var height = $("#webgl").height();
    var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
    var renderer = new THREE.WebGLRenderer();
    renderer.setClearColor( 0xffffff, 1 );
    renderer.setSize( width, height );
    document.getElementById("webgl").appendChild( renderer.domElement );
    var geometry = new THREE.DodecahedronGeometry(5.0);
    var vShader = document.getElementById('vertex');
    var fShader = document.getElementById('fragment');
    var shaderMaterial =
        new THREE.ShaderMaterial({
            uniforms:       {time: {type: 'f', value: 0.0}}, // uniform float time
            vertexShader:   vShader.textContent,
            fragmentShader: fShader.textContent
        });
    var dodeca = new THREE.Mesh( geometry, shaderMaterial );
    scene.add( dodeca );
    camera.position.z = 10;
    function render() {
        requestAnimationFrame( render );
        renderer.render( scene, camera );
        dodeca.rotation.y += 0.01;
        shaderMaterial.uniforms.time.value += 0.01; // update the time
    }
    render();
&lt;/script&gt;
</pre></code>

<div id="webgl" style="width: 100%; height: 400px;"></div>

<script>
    var scene = new THREE.Scene();
    var width = $("#webgl").width();
    var height = $("#webgl").height();
    var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
    var renderer = new THREE.WebGLRenderer();
    renderer.setClearColor( 0xffffff, 1 );
    renderer.setSize( width, height );
    document.getElementById("webgl").appendChild( renderer.domElement );
    var geometry = new THREE.DodecahedronGeometry(5.0);
    var vShader = document.getElementById('vertex');
    var fShader = document.getElementById('fragment');
    var shaderMaterial =
        new THREE.ShaderMaterial({
            uniforms:       {time: {type: 'f', value: 0.0}},
            vertexShader:   vShader.textContent,
            fragmentShader: fShader.textContent
        });
    var dodeca = new THREE.Mesh( geometry, shaderMaterial );
    scene.add( dodeca );
    camera.position.z = 10;
    function render() {
        requestAnimationFrame( render );
        renderer.render( scene, camera );
        dodeca.rotation.y += 0.01;
        shaderMaterial.uniforms.time.value += 0.01;
    }
    render();
</script>


<p>All you need to do is declare a shader material and create a mesh with it. ShaderMaterial takes a vertex shader, a fragment shader and an object that contains optional uniform variables. 

</p>
<pre><code>shaderMaterial = new THREE.ShaderMaterial({
    uniforms:       {time: {type: 'f', value: 0.0}},
    vertexShader:   vShader.textContent,
    fragmentShader: fShader.textContent
});
</code></pre>
Uniform types available in ThreeJS can be seen <a href="https://github.com/mrdoob/three.js/wiki/Uniforms-types">here</a>. You can use floats, vectors, matrices and textures.</p>



