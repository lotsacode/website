<h1>Three.js shader tutorial part 1 - Basic example</h1>
<p>
    Shaders can be confusing for someone new to computer graphics.
    In this tutorial I'll try to explain in simple terms what they are
    and how to use them in ThreeJS.
</p>
<p>
    A shader is a small program that lives in the GPU.
    They are written in a special graphics language called OpenGL Shading Language (GLSL), which is almost like the C language.
    In ThreeJS shader programs are applied to a special material - <code class="code-inline">THREE.ShaderMaterial</code>.
</p>
<p>
    Why can't we just skip learning C and write an ordinary javascript programs
    that operate on pixels instead of shader programs? It's possible, but it's not going to perform very well
    due to the parallel nature of computer graphics.
    When you run a shader program, the GPU distributes your program to hundreds of cores that execute it in parallel.
    This is where the power of the GPU comes from. The GPU isn't restricted to just computer graphics, you can
    use it for any kind of parallel computations, for example mining cryptocurrency, but in this tutorial we'll focus on ThreeJS.
</p>


<h2>Overview of GLSL programs</h2>

<p>
    Like said, GLSL is similiar to C. Shader programs come in two types, vertex- and fragment shaders.
    Every vertex shader should contain a <code class="code-inline">main</code> function that sets the value of <code class="code-inline">gl_Position</code>.
    This is the 2D location of the vertex projected to the camera. Every fragment shader should contain a <code class="code-inline">main</code> function that sets the value of
    <code class="code-inline">gl_FragColor</code>. This is the color that is assigned to each pixel. The position of the pixel is stored in <code class="code-inline">gl_FragCoord</code>.
</p>

<p>
    The specific details of OpenGL's rendering pipeline is a long story,
    you can read more about it <a href="https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview">here</a>.
</p>

<p>
    There are three types of special variables in shaders: <b>uniforms</b>, <b>attributes</b>, and <b>varyings</b>.
</p>
<p>
    <b>Uniforms</b> are variables that have the same value for all vertices, such as time. Uniforms can be defined inside Javascript and passed to the shader.
</p>
<p>
    <b>Attributes</b> are variables associated with each vertex, for instance, the vertex position. Attributes can only be accessed within the vertex shader.
</p>
<p>
    <b>Varyings</b> are variables that are defined in the vertex shader,
    and are automatically passed (and interpolated) to the fragment shader.
</p>

<h2>Example vertex shader</h2>

<script id="vertex" type="x-shader/x-vertex">
    varying vec3 pos;
    void main() {
        pos = position;
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    }
</script>



<pre><code class="language-glsl">&lt;script id="vertex" type="x-shader/x-vertex"&gt;
    varying vec3 pos;
    void main() {
        pos = position;
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    }
&lt;/script&gt;
</code></pre>
<p>Let's break down the line
<pre><code class="language-glsl">gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);</code></pre>
</p>
<p>
    The matrices you are seeing here are default uniform variables provided by ThreeJS.
    <code class="code-inline">position</code> is a vertex position that is picked from <code class="code-inline">THREE.Geometry.vertices</code>.
</p>
<p>
    <code class="code-inline">modelMatrix</code> transforms a vertex from model space to world space.
</p>
<p>
    <code class="code-inline">viewMatrix</code> transforms a vertex from world space to camera space.
</p>
<p>
    <code class="code-inline">projectionMatrix</code> projects a vertex from camera space to 2D coordinates.
</p>

<h2>Example fragment shader</h2>

<script id="fragment" type="x-shader/x-fragment">
    varying vec3 pos;
    uniform float time;
    void main() {
        float light =  pow(length(pos), 4.0)/512.0;
        gl_FragColor = vec4(0.0, 0.5, 1.0, 1.0) * light;
    }
</script>

<pre><code class="language-js">&lt;script id="fragment" type="x-shader/x-fragment"&gt;
    varying vec3 pos;
    uniform float time;
    void main() {
        float light =  pow(length(pos), 4.0)/512.0;
        gl_FragColor = vec4(0.0, 0.5, 1.0, 1.0) * light;
    }
&lt;/script&gt;
</code></pre>



<h2>Example scene</h2>

<pre><code class="language-js">&lt;div id="webgl" style="width: 100%; height: 400px;"&gt;&lt;/div&gt;
&lt;script&gt;
    var scene = new THREE.Scene();
    var width = $("#webgl").width();
    var height = $("#webgl").height();
    var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
    var renderer = new THREE.WebGLRenderer();
    renderer.setClearColor( 0xffffff, 1 );
    renderer.setSize( width, height );
    document.getElementById("webgl").appendChild( renderer.domElement );
    var geometry = new THREE.DodecahedronGeometry(5.0);
    var vShader = document.getElementById('vertex');
    var fShader = document.getElementById('fragment');
    var shaderMaterial =
        new THREE.ShaderMaterial({
            uniforms:       {time: {type: 'f', value: 0.0}}, // uniform float time
            vertexShader:   vShader.textContent,
            fragmentShader: fShader.textContent
        });
    var dodeca = new THREE.Mesh( geometry, shaderMaterial );
    scene.add( dodeca );
    camera.position.z = 10;
    function render() {
        requestAnimationFrame( render );
        renderer.render( scene, camera );
        dodeca.rotation.y += 0.01;
        shaderMaterial.uniforms.time.value += 0.01; // update the time
    }
    render();
&lt;/script&gt;
</pre></code>

<div id="webgl" style="width: 100%; height: 400px;"></div>

<script>
    var scene = new THREE.Scene();
    var width = $("#webgl").width();
    var height = $("#webgl").height();
    var camera = new THREE.PerspectiveCamera( 75, width/height, 0.1, 1000 );
    var renderer = new THREE.WebGLRenderer();
    renderer.setClearColor( 0xffffff, 1 );
    renderer.setSize( width, height );
    document.getElementById("webgl").appendChild( renderer.domElement );
    var geometry = new THREE.DodecahedronGeometry(5.0);
    var vShader = document.getElementById('vertex');
    var fShader = document.getElementById('fragment');
    var shaderMaterial =
        new THREE.ShaderMaterial({
            uniforms:       {time: {type: 'f', value: 0.0}},
            vertexShader:   vShader.textContent,
            fragmentShader: fShader.textContent
        });
    var dodeca = new THREE.Mesh( geometry, shaderMaterial );
    scene.add( dodeca );
    camera.position.z = 10;
    function render() {
        requestAnimationFrame( render );
        renderer.render( scene, camera );
        dodeca.rotation.y += 0.01;
        shaderMaterial.uniforms.time.value += 0.01;
    }
    render();
</script>


<p>As you can see, all you need to do is declare a shader material and create a mesh with it. ShaderMaterial takes a vertex shader, a fragment shader and an object that contains optional uniform variables.

</p>
Uniform types available in ThreeJS can be seen <a href="https://github.com/mrdoob/three.js/wiki/Uniforms-types">here</a>.
You can use floats, vectors, matrices and textures.</p>
